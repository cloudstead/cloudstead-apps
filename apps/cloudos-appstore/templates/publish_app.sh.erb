#!/bin/bash
#
# Installs and updates status for an app from a bundle URL
#
# Usage: install_and_publish_app.sh <admin> <status> <bundle-url> [bundle-sha] [server]
#
# You must define APPSTORE_PASS in your environment.
# If bundle-sha is omitted, it will be calculated automatically from the bundle-url
# If server is omitted, the default local server will be used
#

TEMP_JSON=$(mktemp /tmp/app.XXXXXXX.json) || die "Error creating temp file"

function die {
  echo >&2 "${1}"
  if [ -f ${TEMP_JSON} ] ;  then
    rm -f ${TEMP_JSON}
  fi
  exit 1
}

if [ -z "${APPSTORE_PASS}" ] ; then
  die "No APPSTORE_PASS found in environment"
fi

ADMIN="${1}"
STATUS="${2}"
BUNDLE_URL="${3}"
BUNDLE_SHA="${4}"
SERVER="${5}"

if [ -z "${ADMIN}" ] ; then
  die "No admin provided"
fi
if [ -z "${STATUS}" ] ; then
  die "No status provided"
fi
if [ -z "${BUNDLE_URL}" ] ; then
  die "No bundle URL provided"
fi
if [ -z "${BUNDLE_SHA}" ] ; then
  BUNDLE_SHA=$(curl -sf ${BUNDLE_URL} | shasum -a 256 | awk '{print $1}') || die "Error calculating SHA for ${BUNDLE_URL}"
  if [ -z "${BUNDLE_SHA}" ] ; then
    die "Error calculating SHA for ${BUNDLE_URL}"
  fi
fi
if [ -z "${SERVER}" ] ; then
  SERVER="http://127.0.0.1:<%=@app[:databag][:ports]['primary']%>"
fi

CAS_OPTS="--account ${ADMIN} --server ${SERVER}"

# Create the app, save JSON returned to retrieve version
cas apps ${CAS_OPTS} --operation create --bundle ${BUNDLE_URL} --bundle-sha ${BUNDLE_SHA} > ${TEMP_JSON} || die "Error creating app"

# Extract name and version from JSON
created_name=$(cas json --file ${TEMP_JSON} --operation read --path app | tr -d '"')
created_version=$(cas json --file ${TEMP_JSON} --operation read --path version | tr -d '"')

# Extract x.x.x version number
parsed_version=$(echo "${created_version}" | egrep -o '[[:digit:]]+.[[:digit:]]+.[[:digit:]]+')

# Ensure name and version were found, and they are what we expected
if [[ -z "${created_name}" || -z "${created_version}" || "${created_version}" != "${parsed_version}" ]] ; then
  die "Error creating app: created_name=${created_name}, created_version=${created_version}, parsed_version=${parsed_version}"
fi

# Update status of the app
cas apps ${CAS_OPTS} --operation update --name ${created_name} --version ${created_version} --status ${STATUS} > ${TEMP_JSON}
app_status=$(cas json --file ${TEMP_JSON} --operation read --path status | tr -d '"')

# Verify app was successfully published
if [ "${app_status}" == "published" ] ; then
  echo "App ${created_name}/${created_version} successfully published"
  rm -f ${TEMP_JSON}
  exit 0

else
  die "Error publishing app"
fi
